// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                      String                    @id @default(cuid())
  username                String                    @unique
  password_hash           String
  email                   String                    @unique
  emailVerified           DateTime?
  created_at              DateTime                  @default(now())
  screen_name             String?
  socket_id               String?
  timezone                String?
  share_timezone          Boolean?
  person_description      String?
  profile_image           String?
  person_status           String?
  server_members          ServerMember[]
  ConversationParticipant ConversationParticipant[]
  Message                 Message[]
  accounts                Account[]
}

model Server {
  id             String         @id @default(cuid())
  socket_id      String?
  server_name    String
  image          String?
  jamboard       String?
  gameboard      String?
  created_at     DateTime       @default(now())
  description    String?
  config         ServerConfig[]
  server_members ServerMember[]
  channels       Channel[]
  characters     Character[]
  invitations    Invitation[]
}

model ServerConfig {
  id                  Int     @id @default(autoincrement())
  server_id           String  @unique
  config_permission   String
  protected           Boolean?
  password_hash       String?
  explorable          Boolean?
  searchable          Boolean?
  server              Server @relation(fields: [server_id], references: [id], onDelete: Cascade)
}

model ServerMember {
  id        Int     @id @default(autoincrement())
  server_id String
  member_id String
  role      String
  nickname  String?
  icon      String?
  server    Server  @relation(fields: [server_id], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [member_id], references: [id], onDelete: Cascade)
}

model Channel {
  id           Int            @id @default(autoincrement())
  uid          String         @unique
  server_id    String
  channel_name String
  channel_type String
  server       Server         @relation(fields: [server_id], references: [id], onDelete: Cascade)
  Conversation Conversation[]
}

model Conversation {
  id           Int                       @id @default(autoincrement())
  uid          String                    @unique
  channel_id   String?
  created_at   DateTime                  @default(now())
  messages     Message[]
  participants ConversationParticipant[]
  channel      Channel?                   @relation(fields: [channel_id], references: [uid])
}

model ConversationParticipant {
  id              Int          @id @default(autoincrement())
  conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  conversation_id Int
  participant     User         @relation(fields: [participant_id], references: [id], onDelete: Cascade)
  participant_id  String
}

model Message {
  id               Int          @id @default(autoincrement())
  uid              String
  conversation_uid String
  sender_id        String
  message          String
  created_at       DateTime     @default(now())
  conversation     Conversation @relation(fields: [conversation_uid], references: [uid], onDelete: Cascade)
  sender           User         @relation(fields: [sender_id], references: [id], onDelete: Cascade)
}

model Character {
  id        Int    @id @default(autoincrement())
  uid       String
  server_id String
  name      String
  server    Server @relation(fields: [server_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invitation {
  id          String         @id @default(cuid())
  server_id   String
  expires     String
  used_count  Int
  max_uses    Int?
  protected   Boolean
  server      Server  @relation(fields: [server_id], references: [id], onDelete: Cascade)
}
